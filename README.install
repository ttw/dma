# INSTALLING

On most systems (with a development environment installed) you should be able to compile DMA with:

	make

Once it has compiled, you may install it with:

	make install

# TROUBLESHOOTING

Systems that do not default to a compatible `make` version should try `gmake` or `pmake`. Some known culprits are

* Solaris 9
* Solaris 10

Check that you have the following commands installed:

* cc - gcc is known to work
* lex - flex is known to work
* yacc - bison is kjnown to work
* make - BSD make and GNU make is knwon to work
* sh - Need to be POSIX compliant, dash, bash known to work
* install - GNU and BSD versions known to work
* openssl - Add the header location to C_INCLUDE_PATH if you get errors about "err.h"

If you have all of these tools installed, set the CC, YACC, INSTALL, LEX and SH variable to point to the relevant location and command.

Example:

    make CC=gcc YACC=bison LEX=/usr/bin/flex SH=/bin/bash INSTALL=/usr/bin/install

# BUILD PRINCIPLES

`dma` does not use a configuration infrastructure for building (e.g. autoconf).  Largely because it is not required but also out of principle.  It's also been reworked from a split build infrastructure to try and re-sync on the basis that managing the differences can be done better with branching that it can with conditionals.

To this end, we keep a master [Makefile] with necessary definitions.  The intent is that we can then branch that [Makefile] and integrate patches into unified releases branches.

The [Makefile] itself is structured to make patches as clear as possible; firstly everything is one definition per line.  Definitions are grouped by block (sequential lines broken by empty lines).  These blocks are sorted alphabetically.  These conventions should be maintained.

[Makefile]: Makefile The master makefile

The top-level [Makefile] does nothing but call MAKE (recursively) with either [Makefile.GNU] or [Makefile.BSD].
